# -*- coding: utf-8 -*-
"""CV_Lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RHZjk-7NvPveIwWbUzJjhnQpKc9qPpQJ
"""

"""1"""

import cv2 as cv
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.image as img
import matplotlib.patches as patches
from skimage.metrics import structural_similarity as ssim

from google.colab import drive
drive.mount('/content/gdrive')

img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Putin1.jpg',0)
img2 = img.copy()
template = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Template.png',0)
w, h = template.shape[::-1]

# All the 6 methods for comparison in a list
methods = ['cv.TM_CCOEFF', 'cv.TM_CCOEFF_NORMED', 'cv.TM_CCORR',
            'cv.TM_CCORR_NORMED', 'cv.TM_SQDIFF', 'cv.TM_SQDIFF_NORMED']

for meth in methods:
    img = img2.copy()
    method = eval(meth)

    # Apply template Matching
    res = cv.matchTemplate(img,template,method)
    min_val, max_val, min_loc, max_loc = cv.minMaxLoc(res)

    # If the method is TM_SQDIFF or TM_SQDIFF_NORMED, take minimum
    if method in [cv.TM_SQDIFF, cv.TM_SQDIFF_NORMED]:
        top_left = min_loc
    else:
        top_left = max_loc
    bottom_right = (top_left[0] + w, top_left[1] + h)

    cv.rectangle(img,top_left, bottom_right, 255, 2)

    plt.subplot(121),plt.imshow(res,cmap = 'gray')
    plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
    plt.subplot(122),plt.imshow(img,cmap = 'gray')
    plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
    plt.suptitle(meth)

    plt.show()

img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Putin3.jpg',0)
img2 = img.copy()
template = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Template.png',0)
w, h = template.shape[::-1]

# All the 6 methods for comparison in a list
methods = ['cv.TM_CCOEFF', 'cv.TM_CCOEFF_NORMED', 'cv.TM_CCORR',
            'cv.TM_CCORR_NORMED', 'cv.TM_SQDIFF', 'cv.TM_SQDIFF_NORMED']

for meth in methods:
    img = img2.copy()
    method = eval(meth)

    # Apply template Matching
    res = cv.matchTemplate(img,template,method)
    min_val, max_val, min_loc, max_loc = cv.minMaxLoc(res)

    # If the method is TM_SQDIFF or TM_SQDIFF_NORMED, take minimum
    if method in [cv.TM_SQDIFF, cv.TM_SQDIFF_NORMED]:
        top_left = min_loc
    else:
        top_left = max_loc
    bottom_right = (top_left[0] + w, top_left[1] + h)

    cv.rectangle(img,top_left, bottom_right, 255, 2)

    plt.subplot(121),plt.imshow(res,cmap = 'gray')
    plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
    plt.subplot(122),plt.imshow(img,cmap = 'gray')
    plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
    plt.suptitle(meth)

    plt.show()

img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Putin10.jpeg',0)
img2 = img.copy()
template = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Template.png',0)
w, h = template.shape[::-1]

# All the 6 methods for comparison in a list
methods = ['cv.TM_CCOEFF', 'cv.TM_CCOEFF_NORMED', 'cv.TM_CCORR',
            'cv.TM_CCORR_NORMED', 'cv.TM_SQDIFF', 'cv.TM_SQDIFF_NORMED']

for meth in methods:
    img = img2.copy()
    method = eval(meth)

    # Apply template Matching
    res = cv.matchTemplate(img,template,method)
    min_val, max_val, min_loc, max_loc = cv.minMaxLoc(res)

    # If the method is TM_SQDIFF or TM_SQDIFF_NORMED, take minimum
    if method in [cv.TM_SQDIFF, cv.TM_SQDIFF_NORMED]:
        top_left = min_loc
    else:
        top_left = max_loc
    bottom_right = (top_left[0] + w, top_left[1] + h)

    cv.rectangle(img,top_left, bottom_right, 255, 2)

    plt.subplot(121),plt.imshow(res,cmap = 'gray')
    plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
    plt.subplot(122),plt.imshow(img,cmap = 'gray')
    plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
    plt.suptitle(meth)

    plt.show()


img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Putin11.jpeg',0)
img2 = img.copy()
template = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Template.png',0)
w, h = template.shape[::-1]

# All the 6 methods for comparison in a list
methods = ['cv.TM_CCOEFF', 'cv.TM_CCOEFF_NORMED', 'cv.TM_CCORR',
            'cv.TM_CCORR_NORMED', 'cv.TM_SQDIFF', 'cv.TM_SQDIFF_NORMED']

for meth in methods:
    img = img2.copy()
    method = eval(meth)

    # Apply template Matching
    res = cv.matchTemplate(img,template,method)
    min_val, max_val, min_loc, max_loc = cv.minMaxLoc(res)

    # If the method is TM_SQDIFF or TM_SQDIFF_NORMED, take minimum
    if method in [cv.TM_SQDIFF, cv.TM_SQDIFF_NORMED]:
        top_left = min_loc
    else:
        top_left = max_loc
    bottom_right = (top_left[0] + w, top_left[1] + h)

    cv.rectangle(img,top_left, bottom_right, 255, 2)

    plt.subplot(121),plt.imshow(res,cmap = 'gray')
    plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
    plt.subplot(122),plt.imshow(img,cmap = 'gray')
    plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
    plt.suptitle(meth)

    plt.show()


img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Putin8.jpeg',0)
img2 = img.copy()
template = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Template.png',0)
w, h = template.shape[::-1]

# All the 6 methods for comparison in a list
methods = ['cv.TM_CCOEFF', 'cv.TM_CCOEFF_NORMED', 'cv.TM_CCORR',
            'cv.TM_CCORR_NORMED', 'cv.TM_SQDIFF', 'cv.TM_SQDIFF_NORMED']

for meth in methods:
    img = img2.copy()
    method = eval(meth)

    # Apply template Matching
    res = cv.matchTemplate(img,template,method)
    min_val, max_val, min_loc, max_loc = cv.minMaxLoc(res)

    # If the method is TM_SQDIFF or TM_SQDIFF_NORMED, take minimum
    if method in [cv.TM_SQDIFF, cv.TM_SQDIFF_NORMED]:
        top_left = min_loc
    else:
        top_left = max_loc
    bottom_right = (top_left[0] + w, top_left[1] + h)

    cv.rectangle(img,top_left, bottom_right, 255, 2)

    plt.subplot(121),plt.imshow(res,cmap = 'gray')
    plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
    plt.subplot(122),plt.imshow(img,cmap = 'gray')
    plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
    plt.suptitle(meth)

    plt.show()

img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Putin6.png',0)
img2 = img.copy()
template = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Template.png',0)
w, h = template.shape[::-1]

# All the 6 methods for comparison in a list
methods = ['cv.TM_CCOEFF', 'cv.TM_CCOEFF_NORMED', 'cv.TM_CCORR',
            'cv.TM_CCORR_NORMED', 'cv.TM_SQDIFF', 'cv.TM_SQDIFF_NORMED']

for meth in methods:
    img = img2.copy()
    method = eval(meth)

    # Apply template Matching
    res = cv.matchTemplate(img,template,method)
    min_val, max_val, min_loc, max_loc = cv.minMaxLoc(res)

    # If the method is TM_SQDIFF or TM_SQDIFF_NORMED, take minimum
    if method in [cv.TM_SQDIFF, cv.TM_SQDIFF_NORMED]:
        top_left = min_loc
    else:
        top_left = max_loc
    bottom_right = (top_left[0] + w, top_left[1] + h)

    cv.rectangle(img,top_left, bottom_right, 255, 2)

    plt.subplot(121),plt.imshow(res,cmap = 'gray')
    plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
    plt.subplot(122),plt.imshow(img,cmap = 'gray')
    plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
    plt.suptitle(meth)

    plt.show()

img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Putin5.png',0)
img2 = img.copy()
template = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Template.png',0)
w, h = template.shape[::-1]

# All the 6 methods for comparison in a list
methods = ['cv.TM_CCOEFF', 'cv.TM_CCOEFF_NORMED', 'cv.TM_CCORR',
            'cv.TM_CCORR_NORMED', 'cv.TM_SQDIFF', 'cv.TM_SQDIFF_NORMED']

for meth in methods:
    img = img2.copy()
    method = eval(meth)

    # Apply template Matching
    res = cv.matchTemplate(img,template,method)
    min_val, max_val, min_loc, max_loc = cv.minMaxLoc(res)

    # If the method is TM_SQDIFF or TM_SQDIFF_NORMED, take minimum
    if method in [cv.TM_SQDIFF, cv.TM_SQDIFF_NORMED]:
        top_left = min_loc
    else:
        top_left = max_loc
    bottom_right = (top_left[0] + w, top_left[1] + h)

    cv.rectangle(img,top_left, bottom_right, 255, 2)

    plt.subplot(121),plt.imshow(res,cmap = 'gray')
    plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
    plt.subplot(122),plt.imshow(img,cmap = 'gray')
    plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
    plt.suptitle(meth)

    plt.show()


img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Putin7.jpeg',0)
img2 = img.copy()
template = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Template.png',0)
w, h = template.shape[::-1]

# All the 6 methods for comparison in a list
methods = ['cv.TM_CCOEFF', 'cv.TM_CCOEFF_NORMED', 'cv.TM_CCORR',
            'cv.TM_CCORR_NORMED', 'cv.TM_SQDIFF', 'cv.TM_SQDIFF_NORMED']

for meth in methods:
    img = img2.copy()
    method = eval(meth)

    # Apply template Matching
    res = cv.matchTemplate(img,template,method)
    min_val, max_val, min_loc, max_loc = cv.minMaxLoc(res)

    # If the method is TM_SQDIFF or TM_SQDIFF_NORMED, take minimum
    if method in [cv.TM_SQDIFF, cv.TM_SQDIFF_NORMED]:
        top_left = min_loc
    else:
        top_left = max_loc
    bottom_right = (top_left[0] + w, top_left[1] + h)

    cv.rectangle(img,top_left, bottom_right, 255, 2)

    plt.subplot(121),plt.imshow(res,cmap = 'gray')
    plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
    plt.subplot(122),plt.imshow(img,cmap = 'gray')
    plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
    plt.suptitle(meth)

    plt.show()

"""2"""

def get_bbox_points(train_kp, matches):
    points = [trainKP[m.trainIdx].pt for m in matches]
    xs = [pt[0] for pt in points]
    ys = [pt[1] for pt in points]
    x0 = int(min(xs))
    x1 = int(max(xs))
    y0 = int(min(ys))
    y1 = int(max(ys))
    return (x0, y0), (x1, y1)

query_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/CupCup.jpeg')
original_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/Cup.jpeg') 
query_img_bw = cv.cvtColor(query_img, cv.IMREAD_GRAYSCALE)
original_img_bw = cv.cvtColor(original_img, cv.IMREAD_GRAYSCALE)
orb = cv.ORB_create()
queryKP, queryDes = orb.detectAndCompute(query_img_bw,None)
trainKP, trainDes = orb.detectAndCompute(original_img_bw,None)
matcher = cv.BFMatcher(cv.NORM_HAMMING, crossCheck=True)
matches = matcher.match(queryDes,trainDes)
matches = sorted(matches, key = lambda x:x.distance)
final_img = cv.drawMatches(query_img, queryKP, original_img, trainKP, matches[:100],None)
final_img = cv.resize(final_img, (800,450))
point1, point2 = get_bbox_points(trainKP, matches)
bbox_img = bbox_img = original_img_bw.copy()
cv.rectangle(bbox_img, point1, point2, (0, 225, 255), 2)
plt.figure(figsize=(15,10))
plt.subplot(121)
plt.imshow(cv.cvtColor(final_img, cv.COLOR_BGR2RGB))
plt.title('Match keypoints'), plt.xticks([]), plt.yticks([])
plt.subplot(122),
plt.imshow(cv.cvtColor(bbox_img, cv.COLOR_BGR2RGB))
plt.title('Detected object'), plt.xticks([]), plt.yticks([])
plt.show()

query_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/CupCup.jpeg')
original_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/1.jpeg') 
query_img_bw = cv.cvtColor(query_img, cv.IMREAD_GRAYSCALE)
original_img_bw = cv.cvtColor(original_img, cv.IMREAD_GRAYSCALE)
orb = cv.ORB_create()
queryKP, queryDes = orb.detectAndCompute(query_img_bw,None)
trainKP, trainDes = orb.detectAndCompute(original_img_bw,None)
matcher = cv.BFMatcher(cv.NORM_HAMMING, crossCheck=True)
matches = matcher.match(queryDes,trainDes)
matches = sorted(matches, key = lambda x:x.distance)
final_img = cv.drawMatches(query_img, queryKP, original_img, trainKP, matches[:100],None)
final_img = cv.resize(final_img, (800,450))
point1, point2 = get_bbox_points(trainKP, matches)
bbox_img = bbox_img = original_img_bw.copy()
cv.rectangle(bbox_img, point1, point2, (0, 225, 255), 2)
plt.figure(figsize=(15,10))
plt.subplot(121)
plt.imshow(cv.cvtColor(final_img, cv.COLOR_BGR2RGB))
plt.title('Match keypoints'), plt.xticks([]), plt.yticks([])
plt.subplot(122),
plt.imshow(cv.cvtColor(bbox_img, cv.COLOR_BGR2RGB))
plt.title('Detected object'), plt.xticks([]), plt.yticks([])
plt.show()

query_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/CupCup.jpeg')
original_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/2.jpeg') 
query_img_bw = cv.cvtColor(query_img, cv.IMREAD_GRAYSCALE)
original_img_bw = cv.cvtColor(original_img, cv.IMREAD_GRAYSCALE)
orb = cv.ORB_create()
queryKP, queryDes = orb.detectAndCompute(query_img_bw,None)
trainKP, trainDes = orb.detectAndCompute(original_img_bw,None)
matcher = cv.BFMatcher(cv.NORM_HAMMING, crossCheck=True)
matches = matcher.match(queryDes,trainDes)
matches = sorted(matches, key = lambda x:x.distance)
final_img = cv.drawMatches(query_img, queryKP, original_img, trainKP, matches[:100],None)
final_img = cv.resize(final_img, (800,450))
point1, point2 = get_bbox_points(trainKP, matches)
bbox_img = bbox_img = original_img_bw.copy()
cv.rectangle(bbox_img, point1, point2, (0, 225, 255), 2)
plt.figure(figsize=(15,10))
plt.subplot(121)
plt.imshow(cv.cvtColor(final_img, cv.COLOR_BGR2RGB))
plt.title('Match keypoints'), plt.xticks([]), plt.yticks([])
plt.subplot(122),
plt.imshow(cv.cvtColor(bbox_img, cv.COLOR_BGR2RGB))
plt.title('Detected object'), plt.xticks([]), plt.yticks([])
plt.show()

query_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/CupCup.jpeg')
original_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/3.jpeg') 
query_img_bw = cv.cvtColor(query_img, cv.IMREAD_GRAYSCALE)
original_img_bw = cv.cvtColor(original_img, cv.IMREAD_GRAYSCALE)
orb = cv.ORB_create()
queryKP, queryDes = orb.detectAndCompute(query_img_bw,None)
trainKP, trainDes = orb.detectAndCompute(original_img_bw,None)
matcher = cv.BFMatcher(cv.NORM_HAMMING, crossCheck=True)
matches = matcher.match(queryDes,trainDes)
matches = sorted(matches, key = lambda x:x.distance)
final_img = cv.drawMatches(query_img, queryKP, original_img, trainKP, matches[:100],None)
final_img = cv.resize(final_img, (800,450))
point1, point2 = get_bbox_points(trainKP, matches)
bbox_img = bbox_img = original_img_bw.copy()
cv.rectangle(bbox_img, point1, point2, (0, 225, 255), 2)
plt.figure(figsize=(15,10))
plt.subplot(121)
plt.imshow(cv.cvtColor(final_img, cv.COLOR_BGR2RGB))
plt.title('Match keypoints'), plt.xticks([]), plt.yticks([])
plt.subplot(122),
plt.imshow(cv.cvtColor(bbox_img, cv.COLOR_BGR2RGB))
plt.title('Detected object'), plt.xticks([]), plt.yticks([])
plt.show()

query_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/CupCup.jpeg')
original_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/4.jpeg') 
query_img_bw = cv.cvtColor(query_img, cv.IMREAD_GRAYSCALE)
original_img_bw = cv.cvtColor(original_img, cv.IMREAD_GRAYSCALE)
orb = cv.ORB_create()
queryKP, queryDes = orb.detectAndCompute(query_img_bw,None)
trainKP, trainDes = orb.detectAndCompute(original_img_bw,None)
matcher = cv.BFMatcher(cv.NORM_HAMMING, crossCheck=True)
matches = matcher.match(queryDes,trainDes)
matches = sorted(matches, key = lambda x:x.distance)
final_img = cv.drawMatches(query_img, queryKP, original_img, trainKP, matches[:100],None)
final_img = cv.resize(final_img, (800,450))
point1, point2 = get_bbox_points(trainKP, matches)
bbox_img = bbox_img = original_img_bw.copy()
cv.rectangle(bbox_img, point1, point2, (0, 225, 255), 2)
plt.figure(figsize=(15,10))
plt.subplot(121)
plt.imshow(cv.cvtColor(final_img, cv.COLOR_BGR2RGB))
plt.title('Match keypoints'), plt.xticks([]), plt.yticks([])
plt.subplot(122),
plt.imshow(cv.cvtColor(bbox_img, cv.COLOR_BGR2RGB))
plt.title('Detected object'), plt.xticks([]), plt.yticks([])
plt.show()

query_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/CupCup.jpeg')
original_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/5.jpeg') 
query_img_bw = cv.cvtColor(query_img, cv.IMREAD_GRAYSCALE)
original_img_bw = cv.cvtColor(original_img, cv.IMREAD_GRAYSCALE)
orb = cv.ORB_create()
queryKP, queryDes = orb.detectAndCompute(query_img_bw,None)
trainKP, trainDes = orb.detectAndCompute(original_img_bw,None)
matcher = cv.BFMatcher(cv.NORM_HAMMING, crossCheck=True)
matches = matcher.match(queryDes,trainDes)
matches = sorted(matches, key = lambda x:x.distance)
final_img = cv.drawMatches(query_img, queryKP, original_img, trainKP, matches[:100],None)
final_img = cv.resize(final_img, (800,450))
point1, point2 = get_bbox_points(trainKP, matches)
bbox_img = bbox_img = original_img_bw.copy()
cv.rectangle(bbox_img, point1, point2, (0, 225, 255), 2)
plt.figure(figsize=(15,10))
plt.subplot(121)
plt.imshow(cv.cvtColor(final_img, cv.COLOR_BGR2RGB))
plt.title('Match keypoints'), plt.xticks([]), plt.yticks([])
plt.subplot(122),
plt.imshow(cv.cvtColor(bbox_img, cv.COLOR_BGR2RGB))
plt.title('Detected object'), plt.xticks([]), plt.yticks([])
plt.show()

query_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/CupCup.jpeg')
original_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/6.jpeg') 
query_img_bw = cv.cvtColor(query_img, cv.IMREAD_GRAYSCALE)
original_img_bw = cv.cvtColor(original_img, cv.IMREAD_GRAYSCALE)
orb = cv.ORB_create()
queryKP, queryDes = orb.detectAndCompute(query_img_bw,None)
trainKP, trainDes = orb.detectAndCompute(original_img_bw,None)
matcher = cv.BFMatcher(cv.NORM_HAMMING, crossCheck=True)
matches = matcher.match(queryDes,trainDes)
matches = sorted(matches, key = lambda x:x.distance)
final_img = cv.drawMatches(query_img, queryKP, original_img, trainKP, matches[:100],None)
final_img = cv.resize(final_img, (800,450))
point1, point2 = get_bbox_points(trainKP, matches)
bbox_img = bbox_img = original_img_bw.copy()
cv.rectangle(bbox_img, point1, point2, (0, 225, 255), 2)
plt.figure(figsize=(15,10))
plt.subplot(121)
plt.imshow(cv.cvtColor(final_img, cv.COLOR_BGR2RGB))
plt.title('Match keypoints'), plt.xticks([]), plt.yticks([])
plt.subplot(122),
plt.imshow(cv.cvtColor(bbox_img, cv.COLOR_BGR2RGB))
plt.title('Detected object'), plt.xticks([]), plt.yticks([])
plt.show()

query_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/CupCup.jpeg')
original_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/7.jpeg') 
query_img_bw = cv.cvtColor(query_img, cv.IMREAD_GRAYSCALE)
original_img_bw = cv.cvtColor(original_img, cv.IMREAD_GRAYSCALE)
orb = cv.ORB_create()
queryKP, queryDes = orb.detectAndCompute(query_img_bw,None)
trainKP, trainDes = orb.detectAndCompute(original_img_bw,None)
matcher = cv.BFMatcher(cv.NORM_HAMMING, crossCheck=True)
matches = matcher.match(queryDes,trainDes)
matches = sorted(matches, key = lambda x:x.distance)
final_img = cv.drawMatches(query_img, queryKP, original_img, trainKP, matches[:100],None)
final_img = cv.resize(final_img, (800,450))
point1, point2 = get_bbox_points(trainKP, matches)
bbox_img = bbox_img = original_img_bw.copy()
cv.rectangle(bbox_img, point1, point2, (0, 225, 255), 2)
plt.figure(figsize=(15,10))
plt.subplot(121)
plt.imshow(cv.cvtColor(final_img, cv.COLOR_BGR2RGB))
plt.title('Match keypoints'), plt.xticks([]), plt.yticks([])
plt.subplot(122),
plt.imshow(cv.cvtColor(bbox_img, cv.COLOR_BGR2RGB))
plt.title('Detected object'), plt.xticks([]), plt.yticks([])
plt.show()

query_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/CupCup.jpeg')
original_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/8.jpeg') 
query_img_bw = cv.cvtColor(query_img, cv.IMREAD_GRAYSCALE)
original_img_bw = cv.cvtColor(original_img, cv.IMREAD_GRAYSCALE)
orb = cv.ORB_create()
queryKP, queryDes = orb.detectAndCompute(query_img_bw,None)
trainKP, trainDes = orb.detectAndCompute(original_img_bw,None)
matcher = cv.BFMatcher(cv.NORM_HAMMING, crossCheck=True)
matches = matcher.match(queryDes,trainDes)
matches = sorted(matches, key = lambda x:x.distance)
final_img = cv.drawMatches(query_img, queryKP, original_img, trainKP, matches[:100],None)
final_img = cv.resize(final_img, (800,450))
point1, point2 = get_bbox_points(trainKP, matches)
bbox_img = bbox_img = original_img_bw.copy()
cv.rectangle(bbox_img, point1, point2, (0, 225, 255), 2)
plt.figure(figsize=(15,10))
plt.subplot(121)
plt.imshow(cv.cvtColor(final_img, cv.COLOR_BGR2RGB))
plt.title('Match keypoints'), plt.xticks([]), plt.yticks([])
plt.subplot(122),
plt.imshow(cv.cvtColor(bbox_img, cv.COLOR_BGR2RGB))
plt.title('Detected object'), plt.xticks([]), plt.yticks([])
plt.show()

query_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/CupCup.jpeg')
original_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/9.jpeg') 
query_img_bw = cv.cvtColor(query_img, cv.IMREAD_GRAYSCALE)
original_img_bw = cv.cvtColor(original_img, cv.IMREAD_GRAYSCALE)
orb = cv.ORB_create()
queryKP, queryDes = orb.detectAndCompute(query_img_bw,None)
trainKP, trainDes = orb.detectAndCompute(original_img_bw,None)
matcher = cv.BFMatcher(cv.NORM_HAMMING, crossCheck=True)
matches = matcher.match(queryDes,trainDes)
matches = sorted(matches, key = lambda x:x.distance)
final_img = cv.drawMatches(query_img, queryKP, original_img, trainKP, matches[:100],None)
final_img = cv.resize(final_img, (800,450))
point1, point2 = get_bbox_points(trainKP, matches)
bbox_img = bbox_img = original_img_bw.copy()
cv.rectangle(bbox_img, point1, point2, (0, 225, 255), 2)
plt.figure(figsize=(15,10))
plt.subplot(121)
plt.imshow(cv.cvtColor(final_img, cv.COLOR_BGR2RGB))
plt.title('Match keypoints'), plt.xticks([]), plt.yticks([])
plt.subplot(122),
plt.imshow(cv.cvtColor(bbox_img, cv.COLOR_BGR2RGB))
plt.title('Detected object'), plt.xticks([]), plt.yticks([])
plt.show()

query_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/CupCup.jpeg')
original_img = cv.imread('/content/gdrive/MyDrive/CV-Lab2/10.jpeg') 
query_img_bw = cv.cvtColor(query_img, cv.IMREAD_GRAYSCALE)
original_img_bw = cv.cvtColor(original_img, cv.IMREAD_GRAYSCALE)
orb = cv.ORB_create()
queryKP, queryDes = orb.detectAndCompute(query_img_bw,None)
trainKP, trainDes = orb.detectAndCompute(original_img_bw,None)
matcher = cv.BFMatcher(cv.NORM_HAMMING, crossCheck=True)
matches = matcher.match(queryDes,trainDes)
matches = sorted(matches, key = lambda x:x.distance)
final_img = cv.drawMatches(query_img, queryKP, original_img, trainKP, matches[:100],None)
final_img = cv.resize(final_img, (800,450))
point1, point2 = get_bbox_points(trainKP, matches)
bbox_img = bbox_img = original_img_bw.copy()
cv.rectangle(bbox_img, point1, point2, (0, 225, 255), 2)
plt.figure(figsize=(15,10))
plt.subplot(121)
plt.imshow(cv.cvtColor(final_img, cv.COLOR_BGR2RGB))
plt.title('Match keypoints'), plt.xticks([]), plt.yticks([])
plt.subplot(122),
plt.imshow(cv.cvtColor(bbox_img, cv.COLOR_BGR2RGB))
plt.title('Detected object'), plt.xticks([]), plt.yticks([])
plt.show()